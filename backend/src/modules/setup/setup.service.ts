import { Injectable, Logger } from '@nestjs/common';
import { SshService } from '../../common/ssh/ssh.service';
import { NodeSSH } from 'node-ssh';

interface ServerConfig {
  ip: string;
  password: string;
}

interface ShadowsocksConfig {
  password: string;
  port: number;
  encryptConfig?: boolean;
}

interface SetupData {
  server_count: number;
  servers: ServerConfig[];
  shadowsocks: ShadowsocksConfig;
  hosts?: string[]; 
}

@Injectable()
export class SetupService {
  private readonly logger = new Logger(SetupService.name);

  constructor(private readonly sshService: SshService) {}
  private async reconnect(
    serverIp: string,
    user: string,
    password: string,
    maxAttempts = 30,
    interval = 2000,
  ): Promise<NodeSSH> {
    let attempt = 0;
    let sshConnection: NodeSSH;
    while (attempt < maxAttempts) {
      try {
        sshConnection = await this.sshService.connectToServer(serverIp, user, password);
        this.logger.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${serverIp} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt + 1}.`);
        return sshConnection;
      } catch (error) {
        this.logger.warn(
          `–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${serverIp} (${attempt + 1}/${maxAttempts}) –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${interval / 1000} —Å–µ–∫...`
        );
        attempt++;
        await new Promise((resolve) => setTimeout(resolve, interval));
      }
    }
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${serverIp} –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫.`);
  }
  private async safeReboot(ssh: NodeSSH, serverIp: string): Promise<void> {
    this.logger.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ ${serverIp}...`);
    try {
      await this.sshService.executeCommand(ssh, 'reboot');
    } catch (error) {
      this.logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${serverIp}: ${(error.message || error).toString()}. –ò–≥–Ω–æ—Ä–∏—Ä—É—é.`);
    } finally {
      try {
        ssh.dispose();
      } catch (disposeError) {
        this.logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${serverIp}: ${(disposeError.message || disposeError).toString()}`);
      }
    }
  }
  
  
  async setupServers(data: SetupData): Promise<any> {
    const { servers, shadowsocks, hosts } = data;

    for (let i = 0; i < servers.length; i++) {
      const server = servers[i];
      const role = i === servers.length - 1 ? 'final' : 'intermediate';

      const isReachable = await this.sshService.pingServer(server.ip);
      if (!isReachable) {
        this.logger.error(`üö® –°–µ—Ä–≤–µ—Ä ${server.ip} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
        continue;
      }

      const ssh = await this.sshService.connectToServer(server.ip, 'root', server.password);
      this.logger.log(`üõ† –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ ${server.ip}. –†–æ–ª—å: ${role}`);

      const osVersion = await this.sshService.executeCommand(ssh, 'lsb_release -rs');
      this.logger.log(`–í–µ—Ä—Å–∏—è –û–° –Ω–∞ ${server.ip}: ${osVersion.trim()}`);

      if (role === 'intermediate') {
        // =====================
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        // =====================
        this.logger.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ${server.ip}...`);
        await this.sshService.executeCommand(ssh, 'wget http://fjedi.com/init_server.sh');
        await this.sshService.executeCommand(ssh, 'chmod +x init_server.sh');
        await this.sshService.executeCommand(ssh, './init_server.sh');
        await this.sshService.executeCommand(ssh, 'apt install -y docker-compose');

        const nextServerIp = servers[i + 1]?.ip;
        const composeContent = `version: '3.0'
services:
  api:
    image: nadoo/glider
    container_name: proxy
    ports:
      - "1080:1080"
      - "8388:8388"
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '800k'
        max-file: '10'
    command: -verbose -listen ss://AEAD_AES_256_GCM:${shadowsocks.password}@api:8388 -forward ss://AEAD_AES_256_GCM:${shadowsocks.password}@${nextServerIp}:8388`;

        await this.sshService.executeCommand(ssh, `echo "${composeContent}" > docker-compose.yml`);

        await this.sshService.executeCommand(ssh, 'docker-compose up -d');

        await this.sshService.executeCommand(ssh, 'ufw disable || true');

      } else if (role === 'final') {
        // =====================
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        // =====================
        this.logger.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ${server.ip}...`);
        await this.sshService.executeCommand(ssh, 'apt update && apt upgrade -y');
        await this.sshService.executeCommand(ssh, 'apt install -y snapd');

        const sshFinal = await this.reconnect(server.ip, 'root', server.password, 30, 2000);

        await this.sshService.executeCommand(sshFinal, 'snap install shadowsocks-libev');

        await this.sshService.executeCommand(
          sshFinal,
          'mkdir -p /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev'
        );
        const configJson = `{
  "server": ["::0", "0.0.0.0"],
  "mode": "tcp_and_udp",
  "server_port": 8388,
  "local_port": 1080,
  "password": "${shadowsocks.password}",
  "timeout": 60,
  "fast_open": true,
  "reuse_port": true,
  "no_delay": true,
  "method": "aes-256-gcm"
}`;
        await this.sshService.executeCommand(
          sshFinal,
          `echo '${configJson}' > /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/config.json`
        );

        if (shadowsocks.encryptConfig) {
          this.logger.log('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...');
          const encKey = await this.sshService.executeCommand(sshFinal, 'openssl rand -hex 16');
          await this.sshService.executeCommand(
            sshFinal,
            `openssl enc -aes-256-cbc -salt -in /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/config.json -out /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/config.json.enc -k "${encKey.trim()}"`
          );
          await this.sshService.executeCommand(sshFinal, 'shred -u /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/config.json');
          await this.sshService.executeCommand(
            sshFinal,
            'echo "' + encKey.trim() + '" > /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/.config_key && chmod 600 /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/.config_key'
          );
          this.logger.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞.');
        }

        const serviceContent = `[Unit]
Description=Shadowsocks-Libev Custom Server Service for %I
Documentation=man:ss-server(1)
After=network-online.target

[Service]
Type=simple
ExecStart=/usr/bin/snap run shadowsocks-libev.ss-server -c /var/snap/shadowsocks-libev/common/etc/shadowsocks-libev/%i.json

[Install]
WantedBy=multi-user.target`;
        await this.sshService.executeCommand(
          sshFinal,
          `echo '${serviceContent}' > /etc/systemd/system/shadowsocks-libev-server@.service`
        );

        await this.sshService.executeCommand(sshFinal, 'systemctl enable --now shadowsocks-libev-server@config');
        const status = await this.sshService.executeCommand(sshFinal, 'systemctl status shadowsocks-libev-server@config');
        this.logger.log(`–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ ${server.ip}: ${status}`);

        await this.sshService.executeCommand(sshFinal, 'iptables -I INPUT -p tcp --dport 8388 -j ACCEPT');
        await this.sshService.executeCommand(sshFinal, 'iptables -I INPUT -p udp --dport 8388 -j ACCEPT');

        const hostsEntry = `13.225.164.218 fapi.binance.com
13.227.61.59 fapi.binance.com
143.204.127.42 fapi.binance.com
13.35.51.41 fapi.binance.com
99.84.58.138 fapi.binance.com
18.65.193.131 fapi.binance.com
18.65.176.132 fapi.binance.com
99.84.140.147 fapi.binance.com
13.225.173.96 fapi.binance.com
54.240.188.143 fapi.binance.com
13.35.55.41 fapi.binance.com
18.65.207.131 fapi.binance.com
143.204.79.125 fapi.binance.com
65.9.40.137 fapi.binance.com
99.84.137.147 fapi.binance.com
18.65.212.131 fapi.binance.com`;
        await this.sshService.executeCommand(sshFinal, `echo '${hostsEntry}' >> /etc/hosts`);
        await this.sshService.executeCommand(sshFinal, `echo '${hostsEntry.replace(/fapi/g, 'api')}' >> /etc/hosts`);

        await this.sshService.executeCommand(sshFinal, 'ufw disable || true');

        sshFinal.dispose();
      }

      await this.sshService.executeCommand(ssh, 'history -c && echo > ~/.bash_history');
      await this.sshService.executeCommand(ssh, 'rm -rf /var/log/* /tmp/*');

      const ssCheck = await this.sshService.executeCommand(ssh, 'ss -tulnp | grep 8388 || echo "not_running"');
      if (ssCheck.includes('not_running')) {
        this.logger.error(`‚ùå Shadowsocks –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${server.ip}, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...`);
        await this.sshService.executeCommand(ssh, 'systemctl restart shadowsocks-libev || true');
      } else {
        this.logger.log(`‚úÖ Shadowsocks —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ${server.ip}`);
      }

      if (hosts && hosts.length > 0) {
        this.logger.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ /etc/hosts –Ω–∞ ${server.ip}`);
        await this.sshService.executeCommand(ssh, 'cp -n /etc/hosts /etc/hosts.bak.ss || true');
        for (const entry of hosts) {
          const [hostname, ip] = entry.split(':');
          await this.sshService.executeCommand(ssh, `echo '${ip} ${hostname} # Shadowsocks hosts entry' >> /etc/hosts`);
        }
      }

      ssh.dispose();
    }

    const response = {
      status: 'success',
      servers: servers.map((srv, idx) => ({
        ip: srv.ip,
        role: idx === servers.length - 1 ? 'final' : 'intermediate',
        ...(idx === servers.length - 1
          ? { shadowsocks: { ip: srv.ip, port: shadowsocks.port, password: shadowsocks.password } }
          : {}),
      })),
    };

    return response;
  }
}
