import { Injectable, Logger } from '@nestjs/common';
import { SshService } from '../../common/ssh/ssh.service';
import { NodeSSH } from 'node-ssh';

interface ServerConfig {
  ip: string;
  password: string;
}

interface ShadowsocksConfig {
  password: string;
  port: number;
}

interface SetupData {
  server_count: number;
  servers: ServerConfig[];
  shadowsocks: ShadowsocksConfig;
  hosts?: string[];
}

@Injectable()
export class SetupService {
  private readonly logger = new Logger(SetupService.name);

  constructor(private readonly sshService: SshService) {}

  private async reconnect(serverIp: string, user: string, password: string): Promise<NodeSSH | null> {
    let attempt = 0;
    while (attempt < 5) {
      try {
        return await this.sshService.connectToServer(serverIp, user, password);
      } catch (error) {
        this.logger.warn(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/5 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${serverIp} –Ω–µ —É–¥–∞–ª–∞—Å—å...`);
        attempt++;
        await new Promise((resolve) => setTimeout(resolve, 5000));
      }
    }
    this.logger.error(`üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${serverIp} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.`);
    return null;
  }
  
  private generateSafeInstallScript(pkg: string): string {
    return `
  bash -e -c '
    echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: ${pkg}"
    i=0
    success=0
  
    while [ $i -lt 5 ]; do
      if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; then
        echo "‚è≥ dpkg lock —Å–≤–æ–±–æ–¥–µ–Ω..."
  
        status_line=$(dpkg -l ${pkg} 2>/dev/null | grep ^[a-z] || echo "not-installed")
        echo "üì¶ –°—Ç–∞—Ç—É—Å dpkg: $status_line"
  
        if echo "$status_line" | grep -q "^ii"; then
          echo "‚úÖ –ü–∞–∫–µ—Ç ${pkg} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
          systemctl restart ${pkg} || true
          exit 0
        elif echo "$status_line" | grep -q "^iF"; then
          echo "‚ö†Ô∏è –ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π (iF), –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å..."
          dpkg --configure ${pkg} || true
          systemctl restart ${pkg} || true
          exit 0
        fi
  
        echo "‚è¨ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞..."
        DEBIAN_FRONTEND=noninteractive apt update || true
        DEBIAN_FRONTEND=noninteractive apt install -y ${pkg} && success=1 && break
      fi
  
      echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $((i+1)): dpkg –∑–∞–Ω—è—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞, –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥..."
      i=$((i+1))
      sleep 5
    done
  
    if [ $success -eq 1 ]; then
      echo "‚úÖ –ü–∞–∫–µ—Ç ${pkg} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
      systemctl restart ${pkg} || true
      exit 0
    else
      echo "üö® –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${pkg} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫"
      exit 1
    fi
  '
  `.trim();
  }
  

  
  private async runStepsWithInstallSupport(
    ssh: NodeSSH,
    steps: { description: string; command: string | (() => string) }[],
  ) {
    for (const step of steps) {
      const command = typeof step.command === 'function' ? step.command() : step.command;
      this.logger.log(`${step.description}...`);
      try {
        const output = await this.sshService.executeCommand(ssh, command);
        this.logger.log(`‚úÖ ${step.description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n${output}`);
      } catch (err) {
        this.logger.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞–≥–µ: ${step.description}`, err.message);
      }
    }
  }

  async setupServers(data: SetupData): Promise<any> {
    const { servers, shadowsocks, hosts } = data;

    const results = [];

    

    for (const [index, server] of servers.entries()) {
      const role = index === servers.length - 1 ? 'final' : 'intermediate';
      const nextServerIp = servers[index + 1]?.ip;
      try {
        const ssh = await this.reconnect(server.ip, 'root', server.password);
        if (!ssh) {
          results.push({ ip: server.ip, status: 'skipped', message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫' });
          continue;
        }
      

      this.logger.log(`üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${server.ip} (–†–æ–ª—å: ${role})`);
      console.log(`üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${server.ip}`);

      const iptablesSteps = [
        {
          description: 'üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding (–≤ –∫–æ–Ω—Ñ–∏–≥–µ)',
          command: 'echo "net.ipv4.ip_forward=1" | tee -a /etc/sysctl.conf',
        },
        {
          description: 'üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding (–≤ runtime)',
          command: 'sysctl -w net.ipv4.ip_forward=1',
        },
        {
          description: 'üì• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ FORWARD —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ eth0',
          command: 'iptables -I FORWARD -i eth0 -o eth0 -j ACCEPT',
        },
        {
          description: `üì• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö TCP/UDP –Ω–∞ –ø–æ—Ä—Ç ${shadowsocks.port}`,
          command: `
            iptables -I INPUT -p tcp --dport ${shadowsocks.port} -j ACCEPT &&
            iptables -I INPUT -p udp --dport ${shadowsocks.port} -j ACCEPT
          `,
        },
        {
          description: 'üåê NAT Masquerade –Ω–∞ eth0',
          command: 'iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE',
        },
        {
          description: 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ iptables –ø—Ä–∞–≤–∏–ª',
          command: 'iptables-save > /etc/iptables.rules',
        },
      ];
      
      for (const step of iptablesSteps) {
        this.logger.log(`${step.description}...`);
        try {
          const output = await this.sshService.executeCommand(ssh, step.command);
          this.logger.log(`‚úÖ ${step.description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n${output}`);
        } catch (err) {
          this.logger.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞–≥–µ: ${step.description}`, err.message);
        }
      }
      
      const shadowsocksSteps = [
        {
          description: 'üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Shadowsocks',
          command: () => this.generateSafeInstallScript('shadowsocks-libev'),
        },  
        {
          description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ , —Å–∫–∞—á–∞–Ω –ª–∏ –ø–∞–∫–µ—Ç",
          command: " dpkg -l | grep shadowsocks-libev"
        },         
        {
          description: 'üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
          command: 'mkdir -p /etc/shadowsocks-libev',
        },
        {
          description: 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
          command: `
            echo '{
              "server": ["::0", "0.0.0.0"],
              "mode": "tcp_and_udp",
              "server_port": ${shadowsocks.port},
              "local_port": 1080,
              "password": "${shadowsocks.password}",
              "timeout": 60,
              "fast_open": true,
              "reuse_port": true,
              "no_delay": true,
              "method": "aes-256-gcm"
            }' > /etc/shadowsocks-libev/config.json
          `,
        },
        {
          description: 'üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Shadowsocks',
          command: 'systemctl restart shadowsocks-libev',
        },
      ];
      
      for (const step of shadowsocksSteps) {
        this.logger.log(`${step.description}...`);
        try {
          const command = typeof step.command === 'function' ? step.command() : step.command;
          const output = await this.sshService.executeCommand(ssh, command);
          this.logger.log(`‚úÖ ${step.description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n${output}`);
        } catch (err) {
          this.logger.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞–≥–µ: ${step.description}`, err.message);
        }
      }
      
      if (hosts && hosts.length > 0) {
        const hostEntries = hosts.map((host) => `127.0.0.1 ${host}`).join("\n");
        const hostsOutput = await this.sshService.executeCommand(
          ssh,
          `printf "%s\\n" "${hostEntries}" >> /etc/hosts`
        );
        console.log(`‚úÖ –•–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}\n${hostsOutput}`);
      }

      if (role === 'intermediate' && nextServerIp) {
        console.log(`‚úÖ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ${server.ip}`);
        const proxySetupOutput = await this.sshService.executeCommand(ssh, `
          apt update && apt install -y docker-compose
          cat <<EOF > docker-compose.yml
          version: '3.0'
          services:
            proxy:
              image: nadoo/glider
              container_name: proxy
              ports:
                - "1080:1080"
                - "${shadowsocks.port}:${shadowsocks.port}"
              restart: unless-stopped
              command: -verbose -listen ss://AEAD_AES_256_GCM:${shadowsocks.password}@api:${shadowsocks.port} -forward ss://AEAD_AES_256_GCM:${shadowsocks.password}@${nextServerIp}:${shadowsocks.port}
          EOF
          docker-compose down || true
          docker-compose up -d
        `);
        console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ${server.ip}\n${proxySetupOutput}`);
      }


    this.logger.log(`‚úÖ –°–µ—Ä–≤–µ—Ä ${server.ip} –Ω–∞—Å—Ç—Ä–æ–µ–Ω.`);
    results.push({ ip: server.ip, status: 'success' });
    }

    catch (error) {
      this.logger.error(`üö® –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}: ${error.message}`);
      results.push({ ip: server.ip, status: 'error', message: error.message });
    }
    }
    this.logger.log('üõ† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...');
    console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...');

    for (const [index, server] of servers.entries()) {
      const alreadySkipped = results.find(
        (res) => res.ip === server.ip && res.status === 'skipped'
      );
      if (alreadySkipped) {
        this.logger.warn(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä ${server.ip} –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–∏–Ω–∏—à–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞) ‚Äî —Ä–∞–Ω–µ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.`);
        continue;
      }      
      const role = index === servers.length - 1 ? 'final' : 'intermediate';
      const nextServerIp = servers[index + 1]?.ip;
      const ssh = await this.reconnect(server.ip, 'root', server.password);
      if (!ssh) {
        this.logger.warn(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä ${server.ip} –ø—Ä–æ–ø—É—â–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
        continue;
      }
    
      if (role === 'intermediate' && nextServerIp) {
        const forwardingSteps = [
          {
            description: 'üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding (–≤ runtime)',
            command: 'echo 1 > /proc/sys/net/ipv4/ip_forward && sysctl -w net.ipv4.ip_forward=1',
          },
          {
            description: 'üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ IP forwarding –≤ –∫–æ–Ω—Ñ–∏–≥',
            command: 'echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf && sysctl -p',
          },
          {
            description: 'üßØ –û—á–∏—Å—Ç–∫–∞ iptables –∏ nat —Ç–∞–±–ª–∏—Ü',
            command: `
              sudo iptables -t nat -F &&
              sudo iptables -t nat -X &&
              sudo iptables -F &&
              sudo iptables -X
            `,
          },
          {
            description: 'üì° –ü—Ä–æ–±—Ä–æ—Å TCP-—Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä',
            command: `sudo iptables -t nat -A PREROUTING -p tcp --dport ${shadowsocks.port} -j DNAT --to-destination ${nextServerIp}:${shadowsocks.port}`,
          },
          {
            description: 'üì° –ü—Ä–æ–±—Ä–æ—Å UDP-—Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä',
            command: `sudo iptables -t nat -A PREROUTING -p udp --dport ${shadowsocks.port} -j DNAT --to-destination ${nextServerIp}:${shadowsocks.port}`,
          },
          {
            description: 'üåê NAT masquerading',
            command: 'sudo iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE',
          },
          {
            description: 'üìã –í—ã–≤–æ–¥ iptables NAT —Ç–∞–±–ª–∏—Ü—ã',
            command: 'sudo iptables -t nat -L -n -v',
          },
        ];
      
        for (const step of forwardingSteps) {
          this.logger.log(`${step.description}...`);
          try {
            const output = await this.sshService.executeCommand(ssh, step.command);
            this.logger.log(`‚úÖ ${step.description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n${output}`);
          } catch (err) {
            this.logger.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞–≥–µ: ${step.description}`, err.message);
          }
        }
      
        this.logger.log(`‚úÖ –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ${server.ip}`);
      }
      

      if (role === 'final') {
        console.log("–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        const finalSteps = [
          {
            description: 'üßØ –û—á–∏—Å—Ç–∫–∞ iptables',
            command: `
              sudo iptables -F &&
              sudo iptables -X &&
              sudo iptables -t nat -F &&
              sudo iptables -t nat -X
            `,
          },
          {
            description: `üß∑ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç ${shadowsocks.port}`,
            command: `
              sudo iptables -A INPUT -p tcp --dport ${shadowsocks.port} -j ACCEPT &&
              sudo iptables -A INPUT -p udp --dport ${shadowsocks.port} -j ACCEPT
            `,
          },
          {
            description: 'üì§ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
            command: 'sudo iptables -A OUTPUT -j ACCEPT',
          },
          {
            description: 'üíæ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ iptables-persistent',
            command: () => this.generateSafeInstallScript('iptables-persistent'), 
          },      
          {
            description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ , —Å–∫–∞—á–∞–Ω –ª–∏ –ø–∞–∫–µ—Ç",
            command: "dpkg -l | grep iptables-persistent"
          },    
          {
            description: 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª iptables',
            command: 'netfilter-persistent save',
          },
          {
            description: 'üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Shadowsocks',
            command: 'systemctl restart shadowsocks-libev',
          },
        ];
        for (const step of finalSteps) {
          this.logger.log(`${step.description}...`);
          try {
            const command = typeof step.command === 'function' ? step.command() : step.command;
            const output = await this.sshService.executeCommand(ssh, command);
            this.logger.log(`‚úÖ ${step.description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n${output}`);
          } catch (err) {
            this.logger.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞–≥–µ: ${step.description}`, err.message);
          }
        }
        
        
        console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ ${server.ip}`);
      }
    }

    this.logger.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.');
    console.log('üéâ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');

    const hasErrors = results.some((res) => res.status === 'error');

    return {
      status: hasErrors ? 'error' : 'success',
      results,
    };
    
  }
}