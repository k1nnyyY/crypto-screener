import { Injectable, Logger } from '@nestjs/common';
import { SshService } from '../../common/ssh/ssh.service';
import { NodeSSH } from 'node-ssh';

interface ServerConfig {
  ip: string;
  password: string;
}

interface ShadowsocksConfig {
  password: string;
  port: number;
}

interface SetupData {
  server_count: number;
  servers: ServerConfig[];
  shadowsocks: ShadowsocksConfig;
  hosts?: string[];
}

@Injectable()
export class SetupService {
  private readonly logger = new Logger(SetupService.name);

  constructor(private readonly sshService: SshService) {}

  private async reconnect(serverIp: string, user: string, password: string): Promise<NodeSSH> {
    let attempt = 0;
    while (attempt < 5) {
      try {
        return await this.sshService.connectToServer(serverIp, user, password);
      } catch (error) {
        this.logger.warn(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/5 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${serverIp} –Ω–µ —É–¥–∞–ª–∞—Å—å...`);
        attempt++;
        await new Promise((resolve) => setTimeout(resolve, 5000));
      }
    }
    throw new Error(`üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${serverIp}`);
  }

  async setupServers(data: SetupData): Promise<any> {
    const { servers, shadowsocks, hosts } = data;

    for (const [index, server] of servers.entries()) {
      const role = index === servers.length - 1 ? 'final' : 'intermediate';
      const nextServerIp = servers[index + 1]?.ip;
      const ssh = await this.reconnect(server.ip, 'root', server.password);

      this.logger.log(`üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${server.ip} (–†–æ–ª—å: ${role})`);
      console.log(`üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${server.ip}`);

      // –í–∫–ª—é—á–∞–µ–º IP forwarding –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º iptables
      const iptablesOutput = await this.sshService.executeCommand(ssh, `
        echo "net.ipv4.ip_forward=1" | tee -a /etc/sysctl.conf
        sysctl -w net.ipv4.ip_forward=1
        iptables -I FORWARD -i eth0 -o eth0 -j ACCEPT
        iptables -I INPUT -p tcp --dport ${shadowsocks.port} -j ACCEPT
        iptables -I INPUT -p udp --dport ${shadowsocks.port} -j ACCEPT
        iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
        iptables-save > /etc/iptables.rules
      `);
      console.log(`‚úÖ iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}\n${iptablesOutput}`);

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Shadowsocks
      const shadowsocksOutput = await this.sshService.executeCommand(ssh, `
        apt update && apt install -y shadowsocks-libev
        mkdir -p /etc/shadowsocks-libev
        echo '{
          "server": ["::0", "0.0.0.0"],
          "mode": "tcp_and_udp",
          "server_port": ${shadowsocks.port},
          "local_port": 1080,
          "password": "${shadowsocks.password}",
          "timeout": 60,
          "fast_open": true,
          "reuse_port": true,
          "no_delay": true,
          "method": "aes-256-gcm"
        }' > /etc/shadowsocks-libev/config.json
        systemctl restart shadowsocks-libev
      `);
      console.log(`‚úÖ Shadowsocks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}\n${shadowsocksOutput}`);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –≤ /etc/hosts
      if (hosts && hosts.length > 0) {
        const hostEntries = hosts.map((host) => `127.0.0.1 ${host}`).join("\n");
        const hostsOutput = await this.sshService.executeCommand(
          ssh,
          `printf "%s\\n" "${hostEntries}" >> /etc/hosts`
        );
        console.log(`‚úÖ –•–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}\n${hostsOutput}`);
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
      if (role === 'intermediate' && nextServerIp) {
        const proxySetupOutput = await this.sshService.executeCommand(ssh, `
          apt update && apt install -y docker-compose
          cat <<EOF > docker-compose.yml
          version: '3.0'
          services:
            proxy:
              image: nadoo/glider
              container_name: proxy
              ports:
                - "1080:1080"
                - "${shadowsocks.port}:${shadowsocks.port}"
              restart: unless-stopped
              command: -verbose -listen ss://AEAD_AES_256_GCM:${shadowsocks.password}@api:${shadowsocks.port} -forward ss://AEAD_AES_256_GCM:${shadowsocks.password}@${nextServerIp}:${shadowsocks.port}
          EOF
          docker-compose down || true
          docker-compose up -d
        `);
        console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ${server.ip}\n${proxySetupOutput}`);
      }

      this.logger.log(`‚úÖ –°–µ—Ä–≤–µ—Ä ${server.ip} –Ω–∞—Å—Ç—Ä–æ–µ–Ω.`);
    }

    this.logger.log('üõ† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...');
    console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...');

    for (const [index, server] of servers.entries()) {
      const role = index === servers.length - 1 ? 'final' : 'intermediate';
      const nextServerIp = servers[index + 1]?.ip;
      const ssh = await this.reconnect(server.ip, 'root', server.password);

      if (role === 'intermediate' && nextServerIp) {
        const forwardingOutput = await this.sshService.executeCommand(ssh, `
          echo 1 > /proc/sys/net/ipv4/ip_forward
          sysctl -w net.ipv4.ip_forward=1
          echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
          sysctl -p
          sudo iptables -t nat -F
          sudo iptables -t nat -X
          sudo iptables -F
          sudo iptables -X
          sudo iptables -t nat -A PREROUTING -p tcp --dport ${shadowsocks.port} -j DNAT --to-destination ${nextServerIp}:${shadowsocks.port}
          sudo iptables -t nat -A PREROUTING -p udp --dport ${shadowsocks.port} -j DNAT --to-destination ${nextServerIp}:${shadowsocks.port}
          sudo iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
          sudo iptables -t nat -L -n -v
        `);
        console.log(`‚úÖ –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ${server.ip}\n${forwardingOutput}`);
      }

      if (role === 'final') {
        const finalSetupOutput = await this.sshService.executeCommand(ssh, `
          sudo iptables -F
          sudo iptables -X
          sudo iptables -t nat -F
          sudo iptables -t nat -X
          sudo iptables -A INPUT -p tcp --dport ${shadowsocks.port} -j ACCEPT
          sudo iptables -A INPUT -p udp --dport ${shadowsocks.port} -j ACCEPT
          sudo iptables -A OUTPUT -j ACCEPT
          apt install -y iptables-persistent
          netfilter-persistent save
          systemctl restart shadowsocks-libev
        `);
        console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ ${server.ip}\n${finalSetupOutput}`);
      }
    }

    this.logger.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.');
    console.log('üéâ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');

    return { status: 'success', servers };
  }
}
