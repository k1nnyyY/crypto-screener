import { Injectable, Logger, BadRequestException } from '@nestjs/common';
import { SshService } from '../../common/ssh/ssh.service';

interface ServerConfig {
  ip: string;
  password: string;
}

interface ResetRequest {
  servers: ServerConfig[];
}

@Injectable()
export class ResetService {
  private readonly logger = new Logger(ResetService.name);

  constructor(private readonly sshService: SshService) {}

  async resetServers(data: ResetRequest): Promise<any> {
    this.logger.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...');

    if (!data || !Array.isArray(data.servers)) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ª—É—á–µ–Ω–æ: ${JSON.stringify(data)}`);
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: servers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    const { servers } = data;

    for (const server of servers) {
      try {
        const ssh = await this.sshService.connectToServer(server.ip, 'root', server.password);
        this.logger.log(`üõ† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É ${server.ip} –¥–ª—è —Å–±—Ä–æ—Å–∞...`);

        const shadowsocksCheck = await this.sshService.executeCommand(
          ssh,
          'systemctl list-units --type=service | grep -E "shadowsocks-libev|shadowsocks" || echo "not_installed"'
        );

        if (shadowsocksCheck.includes('not_installed')) {
          this.logger.warn(`‚ö†Ô∏è Shadowsocks –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–∞.`);
        } else {
          await this.sshService.executeCommand(
            ssh,
            'systemctl stop shadowsocks-libev-server@config || systemctl stop shadowsocks-libev || pkill -f ss-server || true'
          );
          this.logger.log(`‚úÖ Shadowsocks –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}`);
        }

        await this.sshService.executeCommand(
          ssh,
          'rm -rf /etc/shadowsocks-libev/config.json /etc/shadowsocks-libev/config.json.enc /etc/shadowsocks-libev/.config_key'
        );
        this.logger.log(`üßπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Shadowsocks —É–¥–∞–ª–µ–Ω—ã –Ω–∞ ${server.ip}`);

        await this.sshService.executeCommand(
          ssh,
          'iptables -F && iptables -t nat -F && iptables-save > /etc/iptables.rules'
        );
        this.logger.log(`üî• iptables —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}`);

        await this.sshService.executeCommand(
          ssh,
          'sysctl -w net.ipv4.ip_forward=0 && sed -i \'/net.ipv4.ip_forward/d\' /etc/sysctl.conf && echo "net.ipv4.ip_forward=0" >> /etc/sysctl.conf && sysctl -p'
        );
        this.logger.log(`‚õî –û—Ç–∫–ª—é—á—ë–Ω –ø—Ä–æ–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}`);

        await this.sshService.executeCommand(
          ssh,
          'if [ -f /etc/hosts.bak.ss ]; then mv /etc/hosts.bak.ss /etc/hosts; else sed -i \'/# Shadowsocks hosts entry/d\' /etc/hosts; fi'
        );
        this.logger.log(`üìù –§–∞–π–ª /etc/hosts –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}`);

        await this.sshService.executeCommand(
          ssh,
          'rm -rf /var/log/* /tmp/* /var/tmp/*'
        );
        this.logger.log(`üóëÔ∏è –õ–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}`);

        await this.sshService.executeCommand(
          ssh,
          'history -c && echo > ~/.bash_history'
        );
        this.logger.log(`üîè –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}`);

        if (!shadowsocksCheck.includes('not_installed')) {
          await this.sshService.executeCommand(
            ssh,
            'apt purge -y shadowsocks-libev || yum remove -y shadowsocks-libev || true'
          );
          this.logger.log(`üì¶ Shadowsocks —É–¥–∞–ª—ë–Ω —Å ${server.ip}`);
        } else {
          this.logger.log(`üì¶ Shadowsocks –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${server.ip}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.`);
        }

        ssh.dispose();
        this.logger.log(`‚úÖ –°–µ—Ä–≤–µ—Ä ${server.ip} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.`);
      } catch (error) {
        this.logger.error(`üö® –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${server.ip}: ${error.message}`);
      }
    }

    return { status: 'reset_complete' };
  }
}
